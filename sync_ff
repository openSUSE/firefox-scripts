#!/bin/bash

FIREFOX_DIR="firefox"
THUNDERBIRD_DIR="thunderbird"
NSS_DIR="nss"
NSPR_DIR="nspr"

function print_usage () {
    echo "Usage: $0 [PATH]"
    echo "PATH: Optional path to sync-target."
    echo "      If not given \$FF_SYNC_TARGET is used"
}

function ask_cont_abort_question() {
  while true; do
    read -r -p "$1 [(c)ontinue/(a)bort] " ca
    case $ca in
        [Cc]* ) return 0 ;;
        [Aa]* ) return 1 ;;
        * ) echo "Please answer c or a.";;
    esac
  done
}

function get_subdir() {
    if [ -f "./MozillaFirefox.spec" ]; then
        echo "$FIREFOX_DIR"
    elif [ -f "./MozillaThunderbird.spec" ]; then
        echo "$THUNDERBIRD_DIR"
    elif [ -f "./mozilla-nss.spec" ]; then
        echo "$NSS_DIR"
    elif [ -f "./mozilla-nspr.spec" ]; then
        echo "$NSPR_DIR"
    else
        # Error-case!
        echo ""
    fi
}

function sync_nss_nspr () {
    SUBDIR="$1"
    rm "$FF_SYNC_TARGET/$SUBDIR"/*.patch

    # Copy all relevant files that are not patches or tarballs to /firefox
    for f in $(find . -maxdepth 1 -not -name "*.tar.*" -not -name ".osc" -not -name . -not -name "_*"); do
        cp "$f" "$FF_SYNC_TARGET/$SUBDIR/"
    done

}

function sync_ff_tb () {
    SUBDIR="$1"
    rm "$FF_SYNC_TARGET"/*.patch
    rm "$FF_SYNC_TARGET/$SUBDIR"/*.patch

    cp mozilla*.patch "$FF_SYNC_TARGET/"
    # Copy all relevant files that are not patches or tarballs to /firefox
    for f in $(find . -maxdepth 1 -not -name "mozilla*.patch" -not -name "*.tar.*" -not -name "create-tar.sh" -not -name ".osc" -not -name . -not -name "_*"); do
        cp "$f" "$FF_SYNC_TARGET/$SUBDIR/"
    done

    # Create new symlinks in order to notice removed patches
    pushd "$FF_SYNC_TARGET/$SUBDIR" > /dev/null || exit 1
    for ff in ../*.patch; do
        ln -s "$ff" .
    done
    popd > /dev/null || exit 1

}


if [ $# -gt 1 ]; then
    print_usage
    exit 1
fi

if [ $# -eq 1 ]; then
    if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        print_usage
        exit 0
    fi

    FF_SYNC_TARGET="$1"
fi

GIT_SUBDIR=$(get_subdir)

if [ -z "$GIT_SUBDIR" ]; then
    echo ""
    echo "Your current working directory is not a valid osc-dir!"
    echo "This is only working for MozillaFirefox, MozillaThunderbird, mozilla-nss, mozilla-nspr"
    exit 1
fi

if [ -z "$FF_SYNC_TARGET" ]; then
    # No FF_SYNC_TARGET is given!
    echo ""
    echo "No target path specified! Please give it as a commandline argument or define \$FF_SYNC_TARGET"
    exit 1
fi

if [ ! -d "$FF_SYNC_TARGET" ]; then
    echo ""
    echo "Target path $FF_SYNC_TARGET does not exist! Please specifiy an existing path"
    exit 1
fi

if [ ! -d "$FF_SYNC_TARGET/.git" ]; then
    echo ""
    echo "Target path $FF_SYNC_TARGET does not seem to be a git-repo, as it should be!"
    ask_cont_abort_question "Do you want to continue?" || exit 0
    IS_GIT_REPO=0
else
    IS_GIT_REPO=1
fi

pushd "$FF_SYNC_TARGET" > /dev/null || exit 1

if [ $IS_GIT_REPO -eq 1 ]; then
    if [ -n "$(git status --porcelain)" ]; then 
        echo ""
        echo "Target git-repo is not clean! You may loose your uncommited changes, if you continue!"
        echo "Only proceed if you know what you are doing."
        ask_cont_abort_question "Do you want to continue?" || exit 0
    fi

    branch_name=$(git symbolic-ref -q HEAD)
    branch_name=${branch_name##refs/heads/}
    branch_name=${branch_name:-DETACHED_HEAD}
fi

popd > /dev/null || exit 1

echo ""
if [ $IS_GIT_REPO -eq 1 ]; then
    echo "Going to sync to $FF_SYNC_TARGET which is on branch $branch_name"
else
    echo "Going to sync to $FF_SYNC_TARGET which is NOT a git-repo"
fi
echo "(Sync involves deleting TARGET/*.patch)"

ask_cont_abort_question "Do you want to continue?" || exit 0

if [ "$GIT_SUBDIR" = "$FIREFOX_DIR" ] || [ "$GIT_SUBDIR" = "$THUNDERBIRD_DIR" ]; then
    sync_ff_tb "$GIT_SUBDIR"
else
    sync_nss_nspr "$GIT_SUBDIR"
fi
